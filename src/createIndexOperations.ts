import * as fs from 'fs';
import * as path from 'path';
import { getAllowedSubfolders, hasPubspecYaml, shouldSkip } from './utils';

/**
 * Recursively generates or updates _index.dart files for the given directory.
 * Uses a bottom-up approach, processing subdirectories first.
 * @param dir The directory path.
 * @param summary Object to keep track of generated and updated files.
 * @returns A boolean indicating whether any Dart files were found or processed in this directory or its subdirectories.
 */
export async function generateIndexFiles(dir: string, summary?: { generated: number; updated: number; }): Promise<boolean> {
    const localSummary = summary || { generated: 0, updated: 0 };
    const subDirs = getAllowedSubfolders(dir);
    const subIndexExports: string[] = [];
    let hasProcessedDartFiles = false;

    // Process subdirectories first (bottom-up approach)
    for (const subDir of subDirs) {
        const hasSubDirContent = await generateIndexFiles(subDir, localSummary);
        if (hasSubDirContent) {
            hasProcessedDartFiles = true;
            const subDirName = path.basename(subDir);
            const subIndexPath = path.join(subDir, '_index.dart');
            // Only add export statement if _index.dart exists in the subdirectory
            if (fs.existsSync(subIndexPath)) {
                subIndexExports.push(`export '${subDirName}/_index.dart';`);
            }
        }
    }

    // Check if pubspec.yaml is present
    if (hasPubspecYaml(dir)) {
        // If pubspec.yaml is present, don't generate _index.dart for this folder
        // but return true if there are subIndexExports (to include in parent _index.dart)
        return subIndexExports.length > 0;
    }

    // Process Dart files in the current directory
    const currentFolderName = path.basename(dir);
    const dartFiles = fs.readdirSync(dir)
        .filter(file => path.extname(file) === '.dart' && !shouldSkip(file) && file !== '_index.dart');

    let indexPath = path.join(dir, '_index.dart');
    let exportLines = dartFiles
        .filter(file => path.basename(file, '.dart') !== currentFolderName)
        .map(file => `export '${file}';`)
        .join('\n');

    // Include exports for subdirectories' _index.dart
    if (subIndexExports.length > 0) {
        exportLines += (exportLines ? '\n' : '') + subIndexExports.join('\n');
    }

    // If there are exports to write, generate or update the _index.dart file
    if (exportLines.trim().length > 0) {
        hasProcessedDartFiles = true;
        // Prepare the comment block with timestamp
        const timestamp = new Date().toLocaleString();
        const commentBlock = `/*
** Generated by Moinsen Flutter (www.moinsen.dev) at ${timestamp}
*/\n`;

        // Combine comment block and export lines, ensuring a newline at the end
        const content = commentBlock + exportLines + '\n';

        if (fs.existsSync(indexPath)) {
            fs.writeFileSync(indexPath, content, { encoding: 'utf8' });
            localSummary.updated += 1;
        } else {
            fs.writeFileSync(indexPath, content, { encoding: 'utf8' });
            localSummary.generated += 1;
        }
    }

    return hasProcessedDartFiles;
}